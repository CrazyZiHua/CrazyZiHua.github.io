<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/25/Untitled%203/"/>
    <url>/2021/03/25/Untitled%203/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/25/Untitled%202/"/>
    <url>/2021/03/25/Untitled%202/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/03/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象的概念和特点"><a href="#面向对象的概念和特点" class="headerlink" title="面向对象的概念和特点"></a>面向对象的概念和特点</h1><h2 id="1-面向对象的概念："><a href="#1-面向对象的概念：" class="headerlink" title="1.面向对象的概念："></a>1.面向对象的概念：</h2><p>1.面向对象和面向过程其实就像我们用洗衣机洗衣服，面向过程更加注重与每一个步骤，比如放入洗衣机，按开关，倒洗衣液用函数来实现。而面向对象更注重于每一个对象，把人和洗衣机分为两个对象再提出每个对象的属性和方法，写出类，再new对象来实现。就像你是一个老板你要去完成一件事情，你可以自己寻找每一个工具，用工具来完成，你也可以寻早每一个人，每一个人有工具和方法，让他们帮你完成这个项目。</p><p>2.new对象就是在调用构造方法，构造方法名必须和类名一致</p><p>3.构造方法分为隐式无参构造器和显示定一个或多个构造器（无参，有参）</p><p>4.构造器其实就像一个给属性赋<strong>初始值</strong>的方法。</p><h2 id="2-面向对象的特点"><a href="#2-面向对象的特点" class="headerlink" title="2.面向对象的特点"></a>2.面向对象的特点</h2><h2 id="1-封装，隐藏："><a href="#1-封装，隐藏：" class="headerlink" title="1.封装，隐藏："></a>1.封装，隐藏：</h2><p>概念：为了不让调用者随意的给类中的变量赋值，就可以封装和隐藏……java中将数据声明为私有的（private），在提供公共的（public）方法：getXxx()和setXxx()实现对该属性的操作。</p><p>实现：想把属性设置声明私有的，用private关键字，通过编写public类型的setXxx()和getXXX()方法来设置属性和获取属性。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h2><p>概念：对父类的（共性代码）属性继承，子类继承后添加新的属性或方法（特有代码）。</p><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">`<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">person</span>`</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><h2 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h2><h3 id="1-多态的体现"><a href="#1-多态的体现" class="headerlink" title="1.多态的体现:"></a>1.多态的体现:</h3><p>1.方法的重载（本类中的同名方法），重写（子类对父类的覆盖）</p><p>2.对象的多态性，–可以直接应用在抽象类和接口上。</p><p>3.JAVA引用变量有两个类型:编译时类型和运行时类型.编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。变量时使用的类型决定，若编译时类型和运行时类型不一致（动态绑定），就出现多(Polymorphism)<br>若编译时类型和运行时类型不一致，就出现多态(多态性)</p><p>4.对象的多态-在Java中,子类的对象可以替代父类的对象使用对象的多态-在中，子类的对象可以替代父类的对象使用一个变量只能有一种确定的数据类型一个引用类型变量可能指向(引用)多种不同类型的对象<br>Person p = new Student();<br>Person P=新学生()；Person e = new Student(); // Person类型的变量e,指向Student类型的对象<br>5.子类可看做是特殊的父类，所以父类类型的引用可以指向子类的对象:向上转型</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/25/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/03/25/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java语言基础语句"><a href="#Java语言基础语句" class="headerlink" title="Java语言基础语句"></a>Java语言基础语句</h1><h2 id="1-eclipse常用快捷键："><a href="#1-eclipse常用快捷键：" class="headerlink" title="1.eclipse常用快捷键："></a>1.eclipse常用快捷键：</h2><p>​                1.ctrl + / ： 普通双杠注释  </p><p>​                2.Alt = /:生成main 和 sysout 的全名，包括也是overwrite的快捷键</p><p>​                3.Ctrl + 1 （快速修复）；Ctrl + D （删除当前行)；Alt+Shift+R （重命名）；Ctrl + Q （定位到最后编辑的地方）； Ctrl + Shift + O （自动导入包）；Ctrl+D（删除当前行）；Ctrl+1 （快速修复）；Ctrl+T （快速显示当前类的继承结构）；Ctrl+W （关闭当前Editer）；Ctrl+K （参照选中的Word快速定位到下一个）；Ctrl+E （快速显示当前Editer的下拉列表）等等快捷键</p><h2 id="2-基本的循环条件语句示范"><a href="#2-基本的循环条件语句示范" class="headerlink" title="2.基本的循环条件语句示范"></a>2.基本的循环条件语句示范</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>System.out.println(s==<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">2</span>);<span class="hljs-comment">//三目运算符示范</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">99</span>;i++) &#123;<br>s++;<br>&#125;<br>System.out.println(s);<br><span class="hljs-comment">//for 循环代码</span><br><br><span class="hljs-keyword">while</span>(s==<span class="hljs-number">99</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;that is ok&quot;</span>);<br><br>&#125;<br><span class="hljs-comment">//while 循环代码</span><br><br><span class="hljs-keyword">do</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;not ok&quot;</span>);<br>&#125;<span class="hljs-keyword">while</span>(s==<span class="hljs-number">100</span>);<br><br><span class="hljs-comment">//do while 循环代码</span><br><br><span class="hljs-keyword">if</span>(s&gt;<span class="hljs-number">100</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;that is a good s&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s&lt;=<span class="hljs-number">99</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;this a low good s&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;this is ok&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//if ,else if , else 条件语句</span><br><br><span class="hljs-keyword">int</span> b=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">switch</span>(b) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;that is a good s&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(<span class="hljs-string">&quot;that is a low good s&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;that is ok&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//switch 条件语句</span><br></code></pre></td></tr></table></figure><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p> strs 是一个String类型的数组或list，然后用for循环取出list里的每一个string.和下边的效果一样：<br>for(int i=0;i&lt;strs.size();i++){<br> String str=strs.get(i);<br>}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/24/howtobuild/"/>
    <url>/2021/03/24/howtobuild/</url>
    
    <content type="html"><![CDATA[<h1 id="编写以及创造blog"><a href="#编写以及创造blog" class="headerlink" title="编写以及创造blog"></a>编写以及创造blog</h1><ol><li>下载node.js</li><li>下载cnpm工具： npm install -g cnpm –registry-<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a> </li><li>用cnpm安装hexo：cnpm install -g hexo-cli</li><li>创建文件： mkdir blog 进入文件</li><li>初始化博客： sudo hexo init</li><li>启动博客： hexo s</li><li>新建文档： hexo n “           “</li><li>进入博客的文档，开始书写文档</li><li>书写完毕后要退回blog 文档</li><li>清理hexo： hexo clean</li><li>生成 ： hexo g</li><li>再启动： hexo s</li></ol><h1 id="把博客部署到远端去"><a href="#把博客部署到远端去" class="headerlink" title="把博客部署到远端去"></a>把博客部署到远端去</h1><ol><li>创建github仓库</li><li>blog文档下安装插件：cnpm install –save hexo-deployer-git</li><li>设置_config.yml文件中的 #Deployment 中 </li></ol><p><img src="C:\Users\市井小民\AppData\Roaming\Typora\typora-user-images\image-20210324000413772.png" alt="image-20210324000413772"></p><p>​    4.部署到远端：hexo d ，可以先hexo clean ，hexo g</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><ol><li><p><img src="C:\Users\市井小民\AppData\Roaming\Typora\typora-user-images\image-20210324000733319.png" alt="image-20210324000733319"></p><p>2.进入blog文档</p><p>3.<img src="C:\Users\市井小民\AppData\Roaming\Typora\typora-user-images\image-20210324000926095.png" alt="image-20210324000926095"></p><p>4.在config文件中的</p></li></ol><p><img src="C:\Users\市井小民\AppData\Roaming\Typora\typora-user-images\image-20210324001106523.png" alt="image-20210324001106523"></p><p>5.hexo clean, hexo g ,hexo s , hexo</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
